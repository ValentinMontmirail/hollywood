syntax = "proto3";

package remote;

option go_package = "github.com/anthdm/hollywood/remote";

import "actor.proto";

// Define the Remote service with an RPC method for receiving message envelopes.
service Remote {
	// Receive is an RPC method that handles streaming of Envelope messages.
	// It receives a stream of Envelopes and returns a stream of Envelopes.
	rpc Receive(stream Envelope) returns (stream Envelope) {}
} 

// Define a message representing an Envelope, used for encapsulating actor messages in the remote system.
message Envelope {
	repeated string typeNames = 1;  // A list of type names for the messages contained within the envelope.
	repeated actor.PID targets = 2; // A list of target PIDs that the messages in the envelope are intended for.
	repeated actor.PID senders = 3; // A list of sender PIDs corresponding to each message in the envelope.
	repeated Message messages = 4;  // A list of messages contained within the envelope.
	// TODO: Add a serializer ID field to indicate the serializer to be used for the messages.
}

// Define a message representing a generic Message with metadata to identify corresponding targets and senders.
message Message {
	bytes data = 1;           // The serialized data of the message.
	int32 targetIndex = 2;    // The index in the targets list to identify the message's target.
	int32 senderIndex = 3;    // The index in the senders list to identify the message's sender.
	int32 typeNameIndex = 4;  // The index in the typeNames list to identify the type of the message.
}

// Define a message representing a TestMessage, which is a basic structure for testing.
message TestMessage { 
	bytes data = 1;  // The content of the test message.
}
